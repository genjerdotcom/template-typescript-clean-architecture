{"version":3,"file":"transport.js","sourceRoot":"","sources":["../src/transport.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Sentry from \"@sentry/node\";\nimport TransportStream = require(\"winston-transport\");\nimport { LEVEL } from \"triple-beam\";\n\nenum SentrySeverity {\n  Debug = \"debug\",\n  Log = \"log\",\n  Info = \"info\",\n  Warning = \"warning\",\n  Error = \"error\",\n  Fatal = \"fatal\",\n}\n\nconst DEFAULT_LEVELS_MAP: SeverityOptions = {\n  silly: SentrySeverity.Debug,\n  verbose: SentrySeverity.Debug,\n  info: SentrySeverity.Info,\n  debug: SentrySeverity.Debug,\n  warn: SentrySeverity.Warning,\n  error: SentrySeverity.Error,\n};\n\nexport interface SentryTransportOptions\n  extends TransportStream.TransportStreamOptions {\n  sentry?: Sentry.NodeOptions;\n  levelsMap?: SeverityOptions;\n  skipSentryInit?: boolean;\n}\n\ninterface SeverityOptions {\n  [key: string]: Sentry.SeverityLevel;\n}\n\nclass ExtendedError extends Error {\n  constructor(info: any) {\n    super(info.message);\n\n    this.name = info.name || \"Error\";\n    if (info.stack && typeof info.stack === \"string\") {\n      this.stack = info.stack;\n    }\n  }\n}\n\nexport default class SentryTransport extends TransportStream {\n  public silent = false;\n\n  private levelsMap: SeverityOptions = {};\n\n  public constructor(opts?: SentryTransportOptions) {\n    super(opts);\n\n    this.levelsMap = this.setLevelsMap(opts && opts.levelsMap);\n    this.silent = (opts && opts.silent) || false;\n\n    if (!opts || !opts.skipSentryInit) {\n      Sentry.init(SentryTransport.withDefaults(opts && opts.sentry || {}));\n    }\n  }\n\n  public log(info: any, callback: () => void) {\n    setImmediate(() => {\n      this.emit(\"logged\", info);\n    });\n\n    if (this.silent) return callback();\n\n    const { message, tags, user, ...meta } = info;\n    const winstonLevel = info[LEVEL];\n\n    const sentryLevel = this.levelsMap[winstonLevel];\n\n    Sentry.configureScope((scope) => {\n      scope.clear();\n\n      if (tags !== undefined && SentryTransport.isObject(tags)) {\n        scope.setTags(tags);\n      }\n\n      scope.setExtras(meta);\n\n      if (user !== undefined && SentryTransport.isObject(user)) {\n        scope.setUser(user);\n      }\n\n      // TODO: add fingerprints\n      // scope.setFingerprint(['{{ default }}', path]); // fingerprint should be an array\n\n      // scope.clear();\n    });\n\n    // TODO: add breadcrumbs\n    // Sentry.addBreadcrumb({\n    //   message: 'My Breadcrumb',\n    //   // ...\n    // });\n\n    // Capturing Errors / Exceptions\n    if (SentryTransport.shouldLogException(sentryLevel)) {\n      const error =\n        Object.values(info).find((value) => value instanceof Error) ??\n        new ExtendedError(info);\n      Sentry.captureException(error, { tags, level: sentryLevel });\n\n      return callback();\n    }\n\n    // Capturing Messages\n    Sentry.captureMessage(message, sentryLevel);\n    return callback();\n  }\n\n  end(...args: any[]) {\n    Sentry.flush().then(() => {\n      super.end(...args);\n    });\n    return this;\n  }\n\n  public get sentry() {\n    return Sentry;\n  }\n\n  private setLevelsMap = (options?: SeverityOptions): SeverityOptions => {\n    if (!options) {\n      return DEFAULT_LEVELS_MAP;\n    }\n\n    const customLevelsMap = Object.keys(options).reduce<SeverityOptions>(\n      (acc: { [key: string]: any }, winstonSeverity: string) => {\n        acc[winstonSeverity] = options[winstonSeverity];\n        return acc;\n      },\n      {}\n    );\n\n    return {\n      ...DEFAULT_LEVELS_MAP,\n      ...customLevelsMap,\n    };\n  };\n\n  private static withDefaults(options: Sentry.NodeOptions) {\n    return {\n      ...options,\n      dsn: (options && options.dsn) || process.env.SENTRY_DSN || \"\",\n      serverName:\n        (options && options.serverName) || \"winston-transport-sentry-node\",\n      environment:\n        (options && options.environment) ||\n        process.env.SENTRY_ENVIRONMENT ||\n        process.env.NODE_ENV ||\n        \"production\",\n      debug: (options && options.debug) || !!process.env.SENTRY_DEBUG || false,\n      sampleRate: (options && options.sampleRate) || 1.0,\n      maxBreadcrumbs: (options && options.maxBreadcrumbs) || 100,\n    };\n  }\n\n  // private normalizeMessage(msg: any) {\n  //   return msg && msg.message ? msg.message : msg;\n  // }\n\n  private static isObject(obj: any) {\n    const type = typeof obj;\n    return type === \"function\" || (type === \"object\" && !!obj);\n  }\n\n  private static shouldLogException(level: Sentry.SeverityLevel) {\n    return level === SentrySeverity.Fatal || level === SentrySeverity.Error;\n  }\n}\n"]}